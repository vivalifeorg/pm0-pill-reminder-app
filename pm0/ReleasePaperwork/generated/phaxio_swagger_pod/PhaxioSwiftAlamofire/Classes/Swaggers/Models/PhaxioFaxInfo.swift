//
// PhaxioFaxInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class PhaxioFaxInfo: Codable {

    public enum PhaxioDirection: String, Codable { 
        case sent = "sent"
        case received = "received"
    }
    public enum PhaxioStatus: String, Codable { 
        case queued = "queued"
        case pendingbatch = "pendingbatch"
        case inprogress = "inprogress"
        case success = "success"
        case failure = "failure"
        case partialsuccess = "partialsuccess"
    }
    public var id: Int?
    public var direction: PhaxioDirection?
    public var numPages: Int?
    public var cost: Int?
    public var status: PhaxioStatus?
    public var isTest: Bool?
    public var createdAt: Date?
    public var fromNumber: String?
    public var toNumber: String?
    public var recipients: [PhaxioRecipient]?
    public var tags: [String:String]?
    public var errorType: String?
    public var errorMessage: String?
    public var errorId: Int?
    public var completedAt: Date?


    
    public init(id: Int?, direction: PhaxioDirection?, numPages: Int?, cost: Int?, status: PhaxioStatus?, isTest: Bool?, createdAt: Date?, fromNumber: String?, toNumber: String?, recipients: [PhaxioRecipient]?, tags: [String:String]?, errorType: String?, errorMessage: String?, errorId: Int?, completedAt: Date?) {
        self.id = id
        self.direction = direction
        self.numPages = numPages
        self.cost = cost
        self.status = status
        self.isTest = isTest
        self.createdAt = createdAt
        self.fromNumber = fromNumber
        self.toNumber = toNumber
        self.recipients = recipients
        self.tags = tags
        self.errorType = errorType
        self.errorMessage = errorMessage
        self.errorId = errorId
        self.completedAt = completedAt
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(numPages, forKey: "num_pages")
        try container.encodeIfPresent(cost, forKey: "cost")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(isTest, forKey: "is_test")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(fromNumber, forKey: "from_number")
        try container.encodeIfPresent(toNumber, forKey: "to_number")
        try container.encodeIfPresent(recipients, forKey: "recipients")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encodeIfPresent(errorType, forKey: "error_type")
        try container.encodeIfPresent(errorMessage, forKey: "error_message")
        try container.encodeIfPresent(errorId, forKey: "error_id")
        try container.encodeIfPresent(completedAt, forKey: "completed_at")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "id")
        direction = try container.decodeIfPresent(PhaxioDirection.self, forKey: "direction")
        numPages = try container.decodeIfPresent(Int.self, forKey: "num_pages")
        cost = try container.decodeIfPresent(Int.self, forKey: "cost")
        status = try container.decodeIfPresent(PhaxioStatus.self, forKey: "status")
        isTest = try container.decodeIfPresent(Bool.self, forKey: "is_test")
        createdAt = try container.decodeIfPresent(Date.self, forKey: "created_at")
        fromNumber = try container.decodeIfPresent(String.self, forKey: "from_number")
        toNumber = try container.decodeIfPresent(String.self, forKey: "to_number")
        recipients = try container.decodeIfPresent([PhaxioRecipient].self, forKey: "recipients")
        tags = try container.decodeIfPresent([String:String].self, forKey: "tags")
        errorType = try container.decodeIfPresent(String.self, forKey: "error_type")
        errorMessage = try container.decodeIfPresent(String.self, forKey: "error_message")
        errorId = try container.decodeIfPresent(Int.self, forKey: "error_id")
        completedAt = try container.decodeIfPresent(Date.self, forKey: "completed_at")
    }
}

