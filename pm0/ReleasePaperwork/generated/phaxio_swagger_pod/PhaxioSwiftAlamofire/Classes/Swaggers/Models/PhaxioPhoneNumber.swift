//
// PhaxioPhoneNumber.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class PhaxioPhoneNumber: Codable {

    public var phoneNumber: String?
    public var city: String?
    public var state: String?
    public var country: String?
    public var cost: Int?
    public var lastBilledAt: Date?
    public var provisionedAt: Date?
    public var callbackUrl: String?


    
    public init(phoneNumber: String?, city: String?, state: String?, country: String?, cost: Int?, lastBilledAt: Date?, provisionedAt: Date?, callbackUrl: String?) {
        self.phoneNumber = phoneNumber
        self.city = city
        self.state = state
        self.country = country
        self.cost = cost
        self.lastBilledAt = lastBilledAt
        self.provisionedAt = provisionedAt
        self.callbackUrl = callbackUrl
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(phoneNumber, forKey: "phone_number")
        try container.encodeIfPresent(city, forKey: "city")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(country, forKey: "country")
        try container.encodeIfPresent(cost, forKey: "cost")
        try container.encodeIfPresent(lastBilledAt, forKey: "last_billed_at")
        try container.encodeIfPresent(provisionedAt, forKey: "provisioned_at")
        try container.encodeIfPresent(callbackUrl, forKey: "callback_url")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        phoneNumber = try container.decodeIfPresent(String.self, forKey: "phone_number")
        city = try container.decodeIfPresent(String.self, forKey: "city")
        state = try container.decodeIfPresent(String.self, forKey: "state")
        country = try container.decodeIfPresent(String.self, forKey: "country")
        cost = try container.decodeIfPresent(Int.self, forKey: "cost")
        lastBilledAt = try container.decodeIfPresent(Date.self, forKey: "last_billed_at")
        provisionedAt = try container.decodeIfPresent(Date.self, forKey: "provisioned_at")
        callbackUrl = try container.decodeIfPresent(String.self, forKey: "callback_url")
    }
}

