//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**
     Cancel a Fax
     
     - parameter faxId: (path) Fax ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelFax(faxId: Int, completion: @escaping ((_ data: PhaxioSendFaxResponse?,_ error: Error?) -> Void)) {
        cancelFaxWithRequestBuilder(faxId: faxId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Cancel a Fax
     - POST /faxes/{faxId}/cancel
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "id" : 0
  },
  "success" : true,
  "message" : "message"
}}]
     
     - parameter faxId: (path) Fax ID 

     - returns: RequestBuilder<PhaxioSendFaxResponse> 
     */
    open class func cancelFaxWithRequestBuilder(faxId: Int) -> RequestBuilder<PhaxioSendFaxResponse> {
        var path = "/faxes/{faxId}/cancel"
        path = path.replacingOccurrences(of: "{faxId}", with: "\(faxId)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioSendFaxResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter metadata: (form) json file containing the phax code metadata 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPhaxCodeJson(metadata: String, completion: @escaping ((_ data: PhaxioGeneratePhaxCodeJsonResponse?,_ error: Error?) -> Void)) {
        createPhaxCodeJsonWithRequestBuilder(metadata: metadata).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /phax_codes
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "identifier" : "identifier"
  },
  "success" : true,
  "message" : "message"
}}]
     
     - parameter metadata: (form) json file containing the phax code metadata 

     - returns: RequestBuilder<PhaxioGeneratePhaxCodeJsonResponse> 
     */
    open class func createPhaxCodeJsonWithRequestBuilder(metadata: String) -> RequestBuilder<PhaxioGeneratePhaxCodeJsonResponse> {
        let path = "/phax_codes"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let formParams: [String:Any?] = [
            "metadata": metadata
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioGeneratePhaxCodeJsonResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter metadata: (form) json file containing the phax code metadata 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPhaxCodePng(metadata: String, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        createPhaxCodePngWithRequestBuilder(metadata: metadata).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /phax_codes.png
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{output=none}]
     
     - parameter metadata: (form) json file containing the phax code metadata 

     - returns: RequestBuilder<URL> 
     */
    open class func createPhaxCodePngWithRequestBuilder(metadata: String) -> RequestBuilder<URL> {
        let path = "/phax_codes.png"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let formParams: [String:Any?] = [
            "metadata": metadata
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a fax
     
     - parameter faxId: (path) Fax ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFax(faxId: Int, completion: @escaping ((_ data: PhaxioOperationStatus?,_ error: Error?) -> Void)) {
        deleteFaxWithRequestBuilder(faxId: faxId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete a fax
     - DELETE /faxes/{faxId}
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "message"
}}]
     
     - parameter faxId: (path) Fax ID 

     - returns: RequestBuilder<PhaxioOperationStatus> 
     */
    open class func deleteFaxWithRequestBuilder(faxId: Int) -> RequestBuilder<PhaxioOperationStatus> {
        var path = "/faxes/{faxId}"
        path = path.replacingOccurrences(of: "{faxId}", with: "\(faxId)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioOperationStatus>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a fax file
     
     - parameter faxId: (path) Fax ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFaxFile(faxId: Int, completion: @escaping ((_ data: PhaxioOperationStatus?,_ error: Error?) -> Void)) {
        deleteFaxFileWithRequestBuilder(faxId: faxId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete a fax file
     - DELETE /faxes/{faxId}/file
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "message"
}}]
     
     - parameter faxId: (path) Fax ID 

     - returns: RequestBuilder<PhaxioOperationStatus> 
     */
    open class func deleteFaxFileWithRequestBuilder(faxId: Int) -> RequestBuilder<PhaxioOperationStatus> {
        var path = "/faxes/{faxId}/file"
        path = path.replacingOccurrences(of: "{faxId}", with: "\(faxId)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioOperationStatus>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get account status
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountStatus(completion: @escaping ((_ data: PhaxioAccountStatus?,_ error: Error?) -> Void)) {
        getAccountStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get account status
     - GET /account/status
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "faxes_today" : 6,
    "faxes_this_month" : 1,
    "balance" : 0
  },
  "success" : true,
  "message" : "message"
}}]

     - returns: RequestBuilder<PhaxioAccountStatus> 
     */
    open class func getAccountStatusWithRequestBuilder() -> RequestBuilder<PhaxioAccountStatus> {
        let path = "/account/status"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioAccountStatus>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List area codes available for purchasing numbers
     
     - parameter tollFree: (query) If set to &#x60;true&#x60;, only toll free area codes will be returned. If specified and set to &#x60;false&#x60;, only non-toll free area codes will be returned. (optional)
     - parameter countryCode: (query) A country code (E.164) you&#39;d like to filter by (optional)
     - parameter country: (query) A country code (E.164) you&#39;d like to filter by (optional)
     - parameter state: (query) A two character state or province abbreviation (ISO 3166; e.g. &#x60;IL&#x60; or &#x60;YT&#x60;) you&#39;d like to filter by. When using this parameter, &#x60;country_code&#x60; or &#x60;country&#x60; must also be provided. (optional)
     - parameter perPage: (query) How many records to return per page (optional)
     - parameter page: (query) Page number to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAreaCodes(tollFree: Bool? = nil, countryCode: Int? = nil, country: String? = nil, state: String? = nil, perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: PhaxioGetAreaCodesResponse?,_ error: Error?) -> Void)) {
        getAreaCodesWithRequestBuilder(tollFree: tollFree, countryCode: countryCode, country: country, state: state, perPage: perPage, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List area codes available for purchasing numbers
     - GET /public/area_codes
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "country_code" : 0,
    "country" : "country",
    "city" : "city",
    "area_code" : 6,
    "state" : "state",
    "toll_free" : true
  }, {
    "country_code" : 0,
    "country" : "country",
    "city" : "city",
    "area_code" : 6,
    "state" : "state",
    "toll_free" : true
  } ],
  "success" : true,
  "paging" : {
    "per_page" : 6,
    "total" : 0,
    "page" : 1
  },
  "message" : "message"
}}]
     
     - parameter tollFree: (query) If set to &#x60;true&#x60;, only toll free area codes will be returned. If specified and set to &#x60;false&#x60;, only non-toll free area codes will be returned. (optional)
     - parameter countryCode: (query) A country code (E.164) you&#39;d like to filter by (optional)
     - parameter country: (query) A country code (E.164) you&#39;d like to filter by (optional)
     - parameter state: (query) A two character state or province abbreviation (ISO 3166; e.g. &#x60;IL&#x60; or &#x60;YT&#x60;) you&#39;d like to filter by. When using this parameter, &#x60;country_code&#x60; or &#x60;country&#x60; must also be provided. (optional)
     - parameter perPage: (query) How many records to return per page (optional)
     - parameter page: (query) Page number to return (optional)

     - returns: RequestBuilder<PhaxioGetAreaCodesResponse> 
     */
    open class func getAreaCodesWithRequestBuilder(tollFree: Bool? = nil, countryCode: Int? = nil, country: String? = nil, state: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<PhaxioGetAreaCodesResponse> {
        let path = "/public/area_codes"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "toll_free": tollFree, 
            "country_code": countryCode?.encodeToJSON(), 
            "country": country, 
            "state": state, 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<PhaxioGetAreaCodesResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a list of supported countries for sending and receiving faxes
     
     - parameter perPage: (query) How many records to return per page (optional)
     - parameter page: (query) Page number to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCountries(perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: PhaxioGetCountriesResponse?,_ error: Error?) -> Void)) {
        getCountriesWithRequestBuilder(perPage: perPage, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Returns a list of supported countries for sending and receiving faxes
     - GET /public/countries
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "country_code" : 0,
    "receive_support" : "receive_support",
    "name" : "name",
    "alpha2" : "alpha2",
    "price_per_page" : 6,
    "send_support" : "send_support"
  }, {
    "country_code" : 0,
    "receive_support" : "receive_support",
    "name" : "name",
    "alpha2" : "alpha2",
    "price_per_page" : 6,
    "send_support" : "send_support"
  } ],
  "success" : true,
  "paging" : {
    "per_page" : 6,
    "total" : 0,
    "page" : 1
  },
  "message" : "message"
}}]
     
     - parameter perPage: (query) How many records to return per page (optional)
     - parameter page: (query) Page number to return (optional)

     - returns: RequestBuilder<PhaxioGetCountriesResponse> 
     */
    open class func getCountriesWithRequestBuilder(perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<PhaxioGetCountriesResponse> {
        let path = "/public/countries"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<PhaxioGetCountriesResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDefaultPhaxCode(completion: @escaping ((_ data: PhaxioPhaxCode?,_ error: Error?) -> Void)) {
        getDefaultPhaxCodeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /phax_code
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "identifier" : "identifier",
    "metadata" : "metadata",
    "created_at" : "2000-01-23T04:56:07.000+00:00"
  },
  "success" : true,
  "message" : "message"
}}]

     - returns: RequestBuilder<PhaxioPhaxCode> 
     */
    open class func getDefaultPhaxCodeWithRequestBuilder() -> RequestBuilder<PhaxioPhaxCode> {
        let path = "/phax_code"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioPhaxCode>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDefaultPhaxCodePng(completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getDefaultPhaxCodePngWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /phax_code.png
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{output=none}]

     - returns: RequestBuilder<URL> 
     */
    open class func getDefaultPhaxCodePngWithRequestBuilder() -> RequestBuilder<URL> {
        let path = "/phax_code.png"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Fax
     
     - parameter faxId: (path) Fax ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFax(faxId: Int, completion: @escaping ((_ data: PhaxioGetFaxInfoResponse?,_ error: Error?) -> Void)) {
        getFaxWithRequestBuilder(faxId: faxId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Fax
     - GET /faxes/{faxId}
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "to_number" : "to_number",
    "error_message" : "error_message",
    "cost" : 1,
    "error_id" : 7,
    "num_pages" : 6,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "tags" : {
      "key" : "tags"
    },
    "completed_at" : "2000-01-23T04:56:07.000+00:00",
    "from_number" : "from_number",
    "recipients" : [ {
      "error_message" : "error_message",
      "completed_at" : "2000-01-23T04:56:07.000+00:00",
      "error_id" : 2,
      "error_type" : "error_type",
      "phone_number" : "phone_number",
      "bitrate" : 5,
      "resolution" : 5,
      "status" : "status"
    }, {
      "error_message" : "error_message",
      "completed_at" : "2000-01-23T04:56:07.000+00:00",
      "error_id" : 2,
      "error_type" : "error_type",
      "phone_number" : "phone_number",
      "bitrate" : 5,
      "resolution" : 5,
      "status" : "status"
    } ],
    "error_type" : "error_type",
    "id" : 0,
    "is_test" : true,
    "direction" : "sent",
    "status" : "queued"
  },
  "success" : true,
  "message" : "message"
}}]
     
     - parameter faxId: (path) Fax ID 

     - returns: RequestBuilder<PhaxioGetFaxInfoResponse> 
     */
    open class func getFaxWithRequestBuilder(faxId: Int) -> RequestBuilder<PhaxioGetFaxInfoResponse> {
        var path = "/faxes/{faxId}"
        path = path.replacingOccurrences(of: "{faxId}", with: "\(faxId)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioGetFaxInfoResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter thumbnail
     */
    public enum PhaxioThumbnail_getFaxFile: String { 
        case l = "l"
        case s = "s"
    }

    /**
     Get fax content file or thumbnail
     
     - parameter faxId: (path) Fax ID 
     - parameter thumbnail: (query) if set, request a thumbnail only in specified size (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFaxFile(faxId: Int, thumbnail: PhaxioThumbnail_getFaxFile? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getFaxFileWithRequestBuilder(faxId: faxId, thumbnail: thumbnail).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get fax content file or thumbnail
     - GET /faxes/{faxId}/file
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{output=none}]
     
     - parameter faxId: (path) Fax ID 
     - parameter thumbnail: (query) if set, request a thumbnail only in specified size (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func getFaxFileWithRequestBuilder(faxId: Int, thumbnail: PhaxioThumbnail_getFaxFile? = nil) -> RequestBuilder<URL> {
        var path = "/faxes/{faxId}/file"
        path = path.replacingOccurrences(of: "{faxId}", with: "\(faxId)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "thumbnail": thumbnail?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter phaxCodeId: (path) identifier for the phax code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPhaxCode(phaxCodeId: String, completion: @escaping ((_ data: PhaxioPhaxCode?,_ error: Error?) -> Void)) {
        getPhaxCodeWithRequestBuilder(phaxCodeId: phaxCodeId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /phax_codes/{phax_code_id}
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "identifier" : "identifier",
    "metadata" : "metadata",
    "created_at" : "2000-01-23T04:56:07.000+00:00"
  },
  "success" : true,
  "message" : "message"
}}]
     
     - parameter phaxCodeId: (path) identifier for the phax code 

     - returns: RequestBuilder<PhaxioPhaxCode> 
     */
    open class func getPhaxCodeWithRequestBuilder(phaxCodeId: String) -> RequestBuilder<PhaxioPhaxCode> {
        var path = "/phax_codes/{phax_code_id}"
        path = path.replacingOccurrences(of: "{phax_code_id}", with: "\(phaxCodeId)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioPhaxCode>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter phaxCodeId: (path) identifier for the phax code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPhaxCodePng(phaxCodeId: String, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getPhaxCodePngWithRequestBuilder(phaxCodeId: phaxCodeId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /phax_codes/{phax_code_id}.png
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{output=none}]
     
     - parameter phaxCodeId: (path) identifier for the phax code 

     - returns: RequestBuilder<URL> 
     */
    open class func getPhaxCodePngWithRequestBuilder(phaxCodeId: String) -> RequestBuilder<URL> {
        var path = "/phax_codes/{phax_code_id}.png"
        path = path.replacingOccurrences(of: "{phax_code_id}", with: "\(phaxCodeId)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get number info
     
     - parameter number: (path) phone number 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPhoneNumber(number: String, completion: @escaping ((_ data: PhaxioPhoneNumberResponse?,_ error: Error?) -> Void)) {
        getPhoneNumberWithRequestBuilder(number: number).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get number info
     - GET /phone_numbers/{number}
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "callback_url" : "callback_url",
    "country" : "country",
    "cost" : 0,
    "city" : "city",
    "phone_number" : "phone_number",
    "state" : "state",
    "last_billed_at" : "2000-01-23T04:56:07.000+00:00",
    "provisioned_at" : "2000-01-23T04:56:07.000+00:00"
  },
  "success" : true,
  "message" : "message"
}}]
     
     - parameter number: (path) phone number 

     - returns: RequestBuilder<PhaxioPhoneNumberResponse> 
     */
    open class func getPhoneNumberWithRequestBuilder(number: String) -> RequestBuilder<PhaxioPhoneNumberResponse> {
        var path = "/phone_numbers/{number}"
        path = path.replacingOccurrences(of: "{number}", with: "\(number)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioPhoneNumberResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Provision a number
     
     - parameter countryCode: (form) The country code (E.164) of the number you&#39;d like to provision 
     - parameter areaCode: (form) The area code of the number you&#39;d like to provision 
     - parameter callbackUrl: (form) A callback URL that we&#39;ll post to when a fax is received by this number (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func provisionPhoneNumber(countryCode: Int, areaCode: Int, callbackUrl: String? = nil, completion: @escaping ((_ data: PhaxioPhoneNumberResponse?,_ error: Error?) -> Void)) {
        provisionPhoneNumberWithRequestBuilder(countryCode: countryCode, areaCode: areaCode, callbackUrl: callbackUrl).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Provision a number
     - POST /phone_numbers
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "callback_url" : "callback_url",
    "country" : "country",
    "cost" : 0,
    "city" : "city",
    "phone_number" : "phone_number",
    "state" : "state",
    "last_billed_at" : "2000-01-23T04:56:07.000+00:00",
    "provisioned_at" : "2000-01-23T04:56:07.000+00:00"
  },
  "success" : true,
  "message" : "message"
}}]
     
     - parameter countryCode: (form) The country code (E.164) of the number you&#39;d like to provision 
     - parameter areaCode: (form) The area code of the number you&#39;d like to provision 
     - parameter callbackUrl: (form) A callback URL that we&#39;ll post to when a fax is received by this number (optional)

     - returns: RequestBuilder<PhaxioPhoneNumberResponse> 
     */
    open class func provisionPhoneNumberWithRequestBuilder(countryCode: Int, areaCode: Int, callbackUrl: String? = nil) -> RequestBuilder<PhaxioPhoneNumberResponse> {
        let path = "/phone_numbers"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let formParams: [String:Any?] = [
            "country_code": countryCode.encodeToJSON(),
            "area_code": areaCode.encodeToJSON(),
            "callback_url": callbackUrl
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioPhoneNumberResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum PhaxioDirection_queryFaxes: String { 
        case sent = "sent"
        case received = "received"
    }

    /**
     * enum for parameter status
     */
    public enum PhaxioStatus_queryFaxes: String { 
        case queued = "queued"
        case pendingbatch = "pendingbatch"
        case inprogress = "inprogress"
        case success = "success"
        case failure = "failure"
        case partialsuccess = "partialsuccess"
    }

    /**
     List faxes in date range
     
     - parameter createdBefore: (query) End of the range (optional)
     - parameter createdAfter: (query) Beginning of the range (optional)
     - parameter direction: (query) Limits results to faxes with the specified direction (optional)
     - parameter status: (query) Limits results to faxes with the specified status (optional)
     - parameter phoneNumber: (query) A phone number in E.164 format that you want to use to filter results. (optional)
     - parameter perPage: (query) How many records to return per page (optional)
     - parameter page: (query) Page number to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryFaxes(createdBefore: String? = nil, createdAfter: String? = nil, direction: PhaxioDirection_queryFaxes? = nil, status: PhaxioStatus_queryFaxes? = nil, phoneNumber: String? = nil, perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: PhaxioGetFaxesResponse?,_ error: Error?) -> Void)) {
        queryFaxesWithRequestBuilder(createdBefore: createdBefore, createdAfter: createdAfter, direction: direction, status: status, phoneNumber: phoneNumber, perPage: perPage, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List faxes in date range
     - GET /faxes
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "to_number" : "to_number",
    "error_message" : "error_message",
    "cost" : 1,
    "error_id" : 7,
    "num_pages" : 6,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "tags" : {
      "key" : "tags"
    },
    "completed_at" : "2000-01-23T04:56:07.000+00:00",
    "from_number" : "from_number",
    "recipients" : [ {
      "error_message" : "error_message",
      "completed_at" : "2000-01-23T04:56:07.000+00:00",
      "error_id" : 2,
      "error_type" : "error_type",
      "phone_number" : "phone_number",
      "bitrate" : 5,
      "resolution" : 5,
      "status" : "status"
    }, {
      "error_message" : "error_message",
      "completed_at" : "2000-01-23T04:56:07.000+00:00",
      "error_id" : 2,
      "error_type" : "error_type",
      "phone_number" : "phone_number",
      "bitrate" : 5,
      "resolution" : 5,
      "status" : "status"
    } ],
    "error_type" : "error_type",
    "id" : 0,
    "is_test" : true,
    "direction" : "sent",
    "status" : "queued"
  }, {
    "to_number" : "to_number",
    "error_message" : "error_message",
    "cost" : 1,
    "error_id" : 7,
    "num_pages" : 6,
    "created_at" : "2000-01-23T04:56:07.000+00:00",
    "tags" : {
      "key" : "tags"
    },
    "completed_at" : "2000-01-23T04:56:07.000+00:00",
    "from_number" : "from_number",
    "recipients" : [ {
      "error_message" : "error_message",
      "completed_at" : "2000-01-23T04:56:07.000+00:00",
      "error_id" : 2,
      "error_type" : "error_type",
      "phone_number" : "phone_number",
      "bitrate" : 5,
      "resolution" : 5,
      "status" : "status"
    }, {
      "error_message" : "error_message",
      "completed_at" : "2000-01-23T04:56:07.000+00:00",
      "error_id" : 2,
      "error_type" : "error_type",
      "phone_number" : "phone_number",
      "bitrate" : 5,
      "resolution" : 5,
      "status" : "status"
    } ],
    "error_type" : "error_type",
    "id" : 0,
    "is_test" : true,
    "direction" : "sent",
    "status" : "queued"
  } ],
  "success" : true,
  "paging" : {
    "per_page" : 6,
    "total" : 0,
    "page" : 1
  },
  "message" : "message"
}}]
     
     - parameter createdBefore: (query) End of the range (optional)
     - parameter createdAfter: (query) Beginning of the range (optional)
     - parameter direction: (query) Limits results to faxes with the specified direction (optional)
     - parameter status: (query) Limits results to faxes with the specified status (optional)
     - parameter phoneNumber: (query) A phone number in E.164 format that you want to use to filter results. (optional)
     - parameter perPage: (query) How many records to return per page (optional)
     - parameter page: (query) Page number to return (optional)

     - returns: RequestBuilder<PhaxioGetFaxesResponse> 
     */
    open class func queryFaxesWithRequestBuilder(createdBefore: String? = nil, createdAfter: String? = nil, direction: PhaxioDirection_queryFaxes? = nil, status: PhaxioStatus_queryFaxes? = nil, phoneNumber: String? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<PhaxioGetFaxesResponse> {
        let path = "/faxes"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "created_before": createdBefore, 
            "created_after": createdAfter, 
            "direction": direction?.rawValue, 
            "status": status?.rawValue, 
            "phone_number": phoneNumber, 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<PhaxioGetFaxesResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List numbers
     
     - parameter countryCode: (query) A country code you&#39;d like to filter by (optional)
     - parameter areaCode: (query) An area code you&#39;d like to filter by (optional)
     - parameter perPage: (query) How many records to return per page (optional)
     - parameter page: (query) Page number to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryPhoneNumbers(countryCode: Int? = nil, areaCode: Int? = nil, perPage: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: PhaxioListPhoneNumbersResponse?,_ error: Error?) -> Void)) {
        queryPhoneNumbersWithRequestBuilder(countryCode: countryCode, areaCode: areaCode, perPage: perPage, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List numbers
     - GET /phone_numbers
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "callback_url" : "callback_url",
    "country" : "country",
    "cost" : 0,
    "city" : "city",
    "phone_number" : "phone_number",
    "state" : "state",
    "last_billed_at" : "2000-01-23T04:56:07.000+00:00",
    "provisioned_at" : "2000-01-23T04:56:07.000+00:00"
  }, {
    "callback_url" : "callback_url",
    "country" : "country",
    "cost" : 0,
    "city" : "city",
    "phone_number" : "phone_number",
    "state" : "state",
    "last_billed_at" : "2000-01-23T04:56:07.000+00:00",
    "provisioned_at" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "success" : true,
  "message" : "message"
}}]
     
     - parameter countryCode: (query) A country code you&#39;d like to filter by (optional)
     - parameter areaCode: (query) An area code you&#39;d like to filter by (optional)
     - parameter perPage: (query) How many records to return per page (optional)
     - parameter page: (query) Page number to return (optional)

     - returns: RequestBuilder<PhaxioListPhoneNumbersResponse> 
     */
    open class func queryPhoneNumbersWithRequestBuilder(countryCode: Int? = nil, areaCode: Int? = nil, perPage: Int? = nil, page: Int? = nil) -> RequestBuilder<PhaxioListPhoneNumbersResponse> {
        let path = "/phone_numbers"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "country_code": countryCode?.encodeToJSON(), 
            "area_code": areaCode?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<PhaxioListPhoneNumbersResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Release a phone number you no longer need
     
     - parameter number: (path) phone number 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releasePhoneNumber(number: String, completion: @escaping ((_ data: PhaxioOperationStatus?,_ error: Error?) -> Void)) {
        releasePhoneNumberWithRequestBuilder(number: number).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Release a phone number you no longer need
     - DELETE /phone_numbers/{number}
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "message"
}}]
     
     - parameter number: (path) phone number 

     - returns: RequestBuilder<PhaxioOperationStatus> 
     */
    open class func releasePhoneNumberWithRequestBuilder(number: String) -> RequestBuilder<PhaxioOperationStatus> {
        var path = "/phone_numbers/{number}"
        path = path.replacingOccurrences(of: "{number}", with: "\(number)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioOperationStatus>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Resend a Fax
     
     - parameter faxId: (path) Fax ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendFax(faxId: Int, completion: @escaping ((_ data: PhaxioSendFaxResponse?,_ error: Error?) -> Void)) {
        resendFaxWithRequestBuilder(faxId: faxId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Resend a Fax
     - POST /faxes/{faxId}/resend
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "id" : 0
  },
  "success" : true,
  "message" : "message"
}}]
     
     - parameter faxId: (path) Fax ID 

     - returns: RequestBuilder<PhaxioSendFaxResponse> 
     */
    open class func resendFaxWithRequestBuilder(faxId: Int) -> RequestBuilder<PhaxioSendFaxResponse> {
        var path = "/faxes/{faxId}/resend"
        path = path.replacingOccurrences(of: "{faxId}", with: "\(faxId)", options: .literal, range: nil)
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PhaxioSendFaxResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter direction
     */
    public enum PhaxioDirection_sendFax: String { 
        case received = "received"
    }

    /**
     * enum for parameter testFail
     */
    public enum PhaxioTestFail_sendFax: String { 
        case documentconversionerror = "documentConversionError"
        case lineerror = "lineError"
        case faxerror = "faxError"
        case fatalerror = "fatalError"
        case generalerror = "generalError"
    }

    /**
     Create and Send a Fax
     
     - parameter to: (form) phone number 
     - parameter direction: (query) Set to &#39;received&#39; to receive test fax. (optional)
     - parameter file: (form) file to send (optional)
     - parameter contentUrl: (form) url of file to send (optional)
     - parameter headerText: (form) Text that appears at the top of each page (optional)
     - parameter batchDelay: (form) Number of seconds to wait before sending batch (optional)
     - parameter batchCollisionAvoidance: (form) When batch_delay is set, fax will be blocked until the receiving machine is no longer busy (optional)
     - parameter callbackUrl: (form) Overrides global callback URL (optional)
     - parameter cancelTimeout: (form) Number of minutes to wait for successful send before cancelling fax (optional)
     - parameter callerId: (form) Number to use for caller ID (optional)
     - parameter testFail: (form) When sending a test fax, if this is set it will simulate the failure type specified (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendFax(to: [String], direction: PhaxioDirection_sendFax? = nil, file: [URL]? = nil, contentUrl: [String]? = nil, headerText: String? = nil, batchDelay: Int? = nil, batchCollisionAvoidance: Bool? = nil, callbackUrl: String? = nil, cancelTimeout: Int? = nil, callerId: String? = nil, testFail: PhaxioTestFail_sendFax? = nil, completion: @escaping ((_ data: PhaxioSendFaxResponse?,_ error: Error?) -> Void)) {
        sendFaxWithRequestBuilder(to: to, direction: direction, file: file, contentUrl: contentUrl, headerText: headerText, batchDelay: batchDelay, batchCollisionAvoidance: batchCollisionAvoidance, callbackUrl: callbackUrl, cancelTimeout: cancelTimeout, callerId: callerId, testFail: testFail).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create and Send a Fax
     - POST /faxes
     - BASIC:
       - type: basic
       - name: UserSecurity
     - examples: [{contentType=application/json, example={
  "data" : {
    "id" : 0
  },
  "success" : true,
  "message" : "message"
}}]
     
     - parameter to: (form) phone number 
     - parameter direction: (query) Set to &#39;received&#39; to receive test fax. (optional)
     - parameter file: (form) file to send (optional)
     - parameter contentUrl: (form) url of file to send (optional)
     - parameter headerText: (form) Text that appears at the top of each page (optional)
     - parameter batchDelay: (form) Number of seconds to wait before sending batch (optional)
     - parameter batchCollisionAvoidance: (form) When batch_delay is set, fax will be blocked until the receiving machine is no longer busy (optional)
     - parameter callbackUrl: (form) Overrides global callback URL (optional)
     - parameter cancelTimeout: (form) Number of minutes to wait for successful send before cancelling fax (optional)
     - parameter callerId: (form) Number to use for caller ID (optional)
     - parameter testFail: (form) When sending a test fax, if this is set it will simulate the failure type specified (optional)

     - returns: RequestBuilder<PhaxioSendFaxResponse> 
     */
    open class func sendFaxWithRequestBuilder(to: [String], direction: PhaxioDirection_sendFax? = nil, file: [URL]? = nil, contentUrl: [String]? = nil, headerText: String? = nil, batchDelay: Int? = nil, batchCollisionAvoidance: Bool? = nil, callbackUrl: String? = nil, cancelTimeout: Int? = nil, callerId: String? = nil, testFail: PhaxioTestFail_sendFax? = nil) -> RequestBuilder<PhaxioSendFaxResponse> {
        let path = "/faxes"
        let URLString = PhaxioSwiftAlamofireAPI.basePath + path
        let formParams: [String:Any?] = [
            "to[]": to,
            "file[]": file,
            "content_url[]": contentUrl,
            "header_text": headerText,
            "batch_delay": batchDelay?.encodeToJSON(),
            "batch_collision_avoidance": batchCollisionAvoidance,
            "callback_url": callbackUrl,
            "cancel_timeout": cancelTimeout?.encodeToJSON(),
            "caller_id": callerId,
            "test_fail": testFail?.rawValue
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "direction": direction?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<PhaxioSendFaxResponse>.Type = PhaxioSwiftAlamofireAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
