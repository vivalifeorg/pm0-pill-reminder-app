//
//  FaxMedlogEntryGenerated.swift
//  (null)
//
//  Created by Michael Langford on 4/24/18.
//  Copyright Â© 2018 Rowdy Labs LLC. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class FaxMedlogEntryGenerated : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawMedlogEntry(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 600, height: 60), resizing: ResizingBehavior = .aspectFit, doseText: String = "<Dose Desc>", timestampText: String = "04/32/18 at 3:53pm EDT", plannedTime: String = "Breakfast @ 7am", doseDescription: String = "!Erased Dose", timestampDescription: String = "Cleared", plannedTimeDescription: String = "Planned") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 600, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 600, y: resizedFrame.height / 60)


        //// Color Declarations
        let textForeground = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.move(to: CGPoint(x: 0, y: 60))
        clip3Path.addLine(to: CGPoint(x: 603, y: 60))
        clip3Path.addLine(to: CGPoint(x: 603, y: 0))
        clip3Path.addLine(to: CGPoint(x: 0, y: 0))
        clip3Path.addLine(to: CGPoint(x: 0, y: 60))
        clip3Path.close()
        clip3Path.addClip()


        //// Group 4
        //// Label Drawing
        let labelRect = CGRect(x: 6.86, y: 0, width: 109.14, height: 25)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .right
        let labelFontAttributes = [
            .font: UIFont(name: "TrebuchetMS-Bold", size: 17)!,
            .foregroundColor: textForeground,
            .paragraphStyle: labelStyle,
        ] as [NSAttributedStringKey: Any]

        let labelTextHeight: CGFloat = doseDescription.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        doseDescription.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()




        //// Group 5
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 123, y: 0, width: 450, height: 25)
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont(name: "TrebuchetMS", size: 15)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label2Style,
        ] as [NSAttributedStringKey: Any]

        let label2TextHeight: CGFloat = doseText.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        doseText.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()




        //// Label 3 Drawing
        let label3Rect = CGRect(x: 123, y: 40, width: 450, height: 21)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "TrebuchetMS-Italic", size: 15)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
        ] as [NSAttributedStringKey: Any]

        let label3TextHeight: CGFloat = plannedTime.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        plannedTime.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        //// Planned Drawing
        let plannedRect = CGRect(x: 0, y: 40, width: 116, height: 21)
        let plannedStyle = NSMutableParagraphStyle()
        plannedStyle.alignment = .right
        let plannedFontAttributes = [
            .font: UIFont(name: "TrebuchetMS", size: 15)!,
            .foregroundColor: textForeground,
            .paragraphStyle: plannedStyle,
        ] as [NSAttributedStringKey: Any]

        let plannedTextHeight: CGFloat = plannedTimeDescription.boundingRect(with: CGSize(width: plannedRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: plannedFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: plannedRect)
        plannedTimeDescription.draw(in: CGRect(x: plannedRect.minX, y: plannedRect.minY + (plannedRect.height - plannedTextHeight) / 2, width: plannedRect.width, height: plannedTextHeight), withAttributes: plannedFontAttributes)
        context.restoreGState()


        //// Label 5 Drawing
        let label5Rect = CGRect(x: 123, y: 22, width: 450, height: 21)
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont(name: "TrebuchetMS-Italic", size: 15)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label5Style,
        ] as [NSAttributedStringKey: Any]

        let label5TextHeight: CGFloat = timestampText.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        timestampText.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()


        //// Cleared Drawing
        let clearedRect = CGRect(x: 0, y: 22, width: 116, height: 21)
        let clearedStyle = NSMutableParagraphStyle()
        clearedStyle.alignment = .right
        let clearedFontAttributes = [
            .font: UIFont(name: "TrebuchetMS", size: 15)!,
            .foregroundColor: textForeground,
            .paragraphStyle: clearedStyle,
        ] as [NSAttributedStringKey: Any]

        let clearedTextHeight: CGFloat = timestampDescription.boundingRect(with: CGSize(width: clearedRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: clearedFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: clearedRect)
        timestampDescription.draw(in: CGRect(x: clearedRect.minX, y: clearedRect.minY + (clearedRect.height - clearedTextHeight) / 2, width: clearedRect.width, height: clearedTextHeight), withAttributes: clearedFontAttributes)
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 1, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 1, y: 60))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .square
        bezier2Path.stroke()


        //// Topline Drawing
        let toplinePath = UIBezierPath()
        toplinePath.move(to: CGPoint(x: 0, y: 0))
        toplinePath.addLine(to: CGPoint(x: 600, y: 0))
        strokeColor.setStroke()
        toplinePath.lineWidth = 1
        toplinePath.lineCapStyle = .square
        toplinePath.stroke()


        //// Midline Drawing
        let midlinePath = UIBezierPath()
        midlinePath.move(to: CGPoint(x: 2, y: 23))
        midlinePath.addLine(to: CGPoint(x: 602, y: 23))
        strokeColor.setStroke()
        midlinePath.lineWidth = 0.5
        midlinePath.lineCapStyle = .square
        midlinePath.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCompactMedlogEntry(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 600, height: 30), resizing: ResizingBehavior = .aspectFit, doseText: String = "<Dose Desc>", timestampText: String = "04/32/18 at 3:53pm EDT", plannedTime: String = "Breakfast @ 7am") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 600, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 600, y: resizedFrame.height / 30)


        //// Color Declarations
        let textForeground = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 1, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 1, y: 30))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .square
        bezier2Path.stroke()


        //// Topline Drawing
        let toplinePath = UIBezierPath()
        toplinePath.move(to: CGPoint(x: 0, y: 0))
        toplinePath.addLine(to: CGPoint(x: 600, y: 0))
        strokeColor.setStroke()
        toplinePath.lineWidth = 1
        toplinePath.lineCapStyle = .square
        toplinePath.stroke()


        //// dose Drawing
        let doseRect = CGRect(x: 8, y: 2, width: 259, height: 25)
        let doseStyle = NSMutableParagraphStyle()
        doseStyle.alignment = .left
        let doseFontAttributes = [
            .font: UIFont(name: "TrebuchetMS-Bold", size: 10)!,
            .foregroundColor: textForeground,
            .paragraphStyle: doseStyle,
        ] as [NSAttributedStringKey: Any]

        let doseTextHeight: CGFloat = doseText.boundingRect(with: CGSize(width: doseRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: doseFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: doseRect)
        doseText.draw(in: CGRect(x: doseRect.minX, y: doseRect.minY + (doseRect.height - doseTextHeight) / 2, width: doseRect.width, height: doseTextHeight), withAttributes: doseFontAttributes)
        context.restoreGState()


        //// Label 5 Drawing
        let label5Rect = CGRect(x: 278, y: 4, width: 140, height: 21)
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont(name: "TrebuchetMS-Italic", size: 10)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label5Style,
        ] as [NSAttributedStringKey: Any]

        let label5TextHeight: CGFloat = timestampText.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        timestampText.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()


        //// Label 3 Drawing
        let label3Rect = CGRect(x: 439, y: 4, width: 150, height: 21)
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont(name: "TrebuchetMS-Italic", size: 10)!,
            .foregroundColor: textForeground,
            .paragraphStyle: label3Style,
        ] as [NSAttributedStringKey: Any]

        let label3TextHeight: CGFloat = plannedTime.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        plannedTime.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)
        
        context.restoreGState()

    }




    @objc(FaxMedlogEntryGeneratedResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
