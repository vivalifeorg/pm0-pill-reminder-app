//
//  MedlogFaxDrawables.swift
//
//  Created by Michael Langford on Apr 24, 2018.
//  Copyright Â© 2018 Rowdy Labs LLC. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit

class MedlogFaxDrawables: NSObject {
  
  
  //MARK: - Canvas Drawings
  
  /// FaxMedlogMarkedTaken
  
  class func drawFaxMedlogMarkedTaken(dose:String,recordedTime:String, plannedTime:String)  {
    /// General Declarations
    let context = UIGraphicsGetCurrentContext()!

    /// MarkedTaken
    do {
      context.saveGState()

      /// Administered
      let administered = NSMutableAttributedString(string: "Administered ")
      administered.addAttribute(.font, value: UIFont(name: "TrebuchetMS-Bold", size: 8.5)!, range: NSRange(location: 0, length: administered.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .right
        paragraphStyle.paragraphSpacing = 1.66
        administered.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: administered.length))
      }
      context.saveGState()
      administered.draw(in: CGRect(x: 0.5, y: 0.48, width: 57.5, height: 11))
      context.restoreGState()

      /// <Dose>
      let dose = NSMutableAttributedString(string: dose)
      dose.addAttribute(.font, value: UIFont(name: "TrebuchetMS-Italic", size: 7.5)!, range: NSRange(location: 0, length: dose.length))
      dose.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: dose.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.paragraphSpacing = 1.66
        dose.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: dose.length))
      }
      context.saveGState()
      dose.draw(in: CGRect(x: 62, y: 1.48, width: 113, height: 11))
      context.restoreGState()

      /// <Recorded Time>
      let recordedTime = NSMutableAttributedString(string: recordedTime)
      recordedTime.addAttribute(.font, value: UIFont(name: "Courier-Oblique", size: 7.5)!, range: NSRange(location: 0, length: recordedTime.length))
      recordedTime.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: recordedTime.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.paragraphSpacing = 1.66
        recordedTime.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recordedTime.length))
      }
      context.saveGState()
      recordedTime.draw(in: CGRect(x: 62, y: 11.41, width: 112.5, height: 11))
      context.restoreGState()

      /// <Planned Time>
      let plannedTime = NSMutableAttributedString(string: plannedTime)
      plannedTime.addAttribute(.font, value: UIFont(name: "Courier-Oblique", size: 7.5)!, range: NSRange(location: 0, length: plannedTime.length))
      plannedTime.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: plannedTime.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.paragraphSpacing = 1.66
        plannedTime.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: plannedTime.length))
      }
      context.saveGState()
      plannedTime.draw(in: CGRect(x: 62, y: 19.95, width: 112.5, height: 11))
      context.restoreGState()

      /// Planned
      let planned = NSMutableAttributedString(string: "    Planned")
      planned.addAttribute(.font, value: UIFont(name: "TrebuchetMS", size: 7.5)!, range: NSRange(location: 0, length: planned.length))
      planned.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: planned.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .right
        paragraphStyle.paragraphSpacing = 1.66
        planned.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: planned.length))
      }
      context.saveGState()
      planned.draw(in: CGRect(x: 1, y: 19.95, width: 57, height: 10))
      context.restoreGState()

      /// Recorded
      let recorded = NSMutableAttributedString(string: "Recorded ")
      recorded.addAttribute(.font, value: UIFont(name: "TrebuchetMS", size: 7.5)!, range: NSRange(location: 0, length: recorded.length))
      recorded.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: recorded.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .right
        paragraphStyle.paragraphSpacing = 1.66
        recorded.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recorded.length))
      }
      context.saveGState()
      recorded.draw(in: CGRect(x: 16, y: 11.41, width: 42, height: 10))
      context.restoreGState()

      /// Line 2
      let line2 = UIBezierPath()
      line2.move(to: CGPoint(x: 0.5, y: 0))
      line2.addLine(to: CGPoint(x: 0.5, y: 28.55))
      context.saveGState()
      context.translateBy(x: 0.25, y: 0.97)
      line2.lineCapStyle = .square
      line2.lineWidth = 0.5
      UIColor.black.setStroke()
      line2.stroke()
      context.restoreGState()

      /// Line 3
      let line3 = UIBezierPath()
      line3.move(to: CGPoint(x: 0, y: 0.5))
      line3.addLine(to: CGPoint(x: 300, y: 0.5))
      context.saveGState()
      context.translateBy(x: 0.75, y: 0.23)
      line3.lineCapStyle = .square
      line3.lineWidth = 0.5
      UIColor.black.setStroke()
      line3.stroke()
      context.restoreGState()

      /// Line 3
      let line4 = UIBezierPath()
      line4.move(to: CGPoint(x: 0, y: 0.5))
      line4.addLine(to: CGPoint(x: 300, y: 0.5))
      context.saveGState()
      context.translateBy(x: 1.5, y: 10.5)
      line4.lineCapStyle = .square
      line4.lineWidth = 0.5
      UIColor.black.setStroke()
      line4.stroke()
      context.restoreGState()

      /// RedrawTabPill
      do {
        context.saveGState()
        context.translateBy(x: 9, y: 17.9)

        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 5, y: 0.05))
        combinedShape.addCurve(to: CGPoint(x: 7, y: 2.42), controlPoint1: CGPoint(x: 6.14, y: 0.27), controlPoint2: CGPoint(x: 7, y: 1.25))
        combinedShape.addCurve(to: CGPoint(x: 5, y: 4.79), controlPoint1: CGPoint(x: 7, y: 3.59), controlPoint2: CGPoint(x: 6.14, y: 4.57))
        combinedShape.addLine(to: CGPoint(x: 5, y: 4.84))
        combinedShape.addLine(to: CGPoint(x: 0.5, y: 4.84))
        combinedShape.addLine(to: CGPoint(x: 0.5, y: 0))
        combinedShape.addLine(to: CGPoint(x: 5, y: 0))
        combinedShape.addLine(to: CGPoint(x: 5, y: 0.05))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 5, y: 0.05))
        context.saveGState()
        context.translateBy(x: 4.5, y: 0)
        context.saveGState()
        combinedShape.lineWidth = 1
        context.beginPath()
        context.addPath(combinedShape.cgPath)
        context.clip(using: .evenOdd)
        UIColor.black.setStroke()
        combinedShape.stroke()
        context.restoreGState()
        context.restoreGState()

        /// Rectangle 2
        do {
          context.saveGState()

          /// Mask
          let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 6, height: 4.84))

          /// Mask (Outline Mask)
          context.saveGState()
          mask.addClip()

          // Empty.

          context.restoreGState()
          // End Mask (Outline Mask)

          context.restoreGState()
        }

        /// Combined Shape
        let combinedShape2 = UIBezierPath()
        combinedShape2.move(to: CGPoint(x: 4, y: 0.01))
        combinedShape2.addCurve(to: CGPoint(x: 6, y: 2.42), controlPoint1: CGPoint(x: 5.12, y: 0.15), controlPoint2: CGPoint(x: 6, y: 1.17))
        combinedShape2.addCurve(to: CGPoint(x: 4, y: 4.82), controlPoint1: CGPoint(x: 6, y: 3.66), controlPoint2: CGPoint(x: 5.12, y: 4.69))
        combinedShape2.addLine(to: CGPoint(x: 4, y: 4.84))
        combinedShape2.addLine(to: CGPoint(x: 0, y: 4.84))
        combinedShape2.addLine(to: CGPoint.zero)
        combinedShape2.addLine(to: CGPoint(x: 4, y: 0))
        combinedShape2.addLine(to: CGPoint(x: 4, y: 0.01))
        combinedShape2.close()
        combinedShape2.move(to: CGPoint(x: 4, y: 0.01))
        context.saveGState()
        context.translateBy(x: 3, y: 2.42)
        context.scaleBy(x: -1, y: 1)
        context.rotate(by: 2 * CGFloat.pi)
        context.translateBy(x: -3, y: -2.42)
        combinedShape2.usesEvenOddFillRule = true
        UIColor.black.setFill()
        combinedShape2.fill()
        context.saveGState()
        combinedShape2.lineWidth = 1
        context.beginPath()
        context.addPath(combinedShape2.cgPath)
        context.clip(using: .evenOdd)
        UIColor.black.setStroke()
        combinedShape2.stroke()
        context.restoreGState()
        context.restoreGState()

        context.restoreGState()
      }

      context.restoreGState()
    }
  }
  
  /// FaxMedlogClearedMark
  
  class func drawFaxMedlogClearedMark(dose:String,recordedTime:String, plannedTime:String) {
    let context = UIGraphicsGetCurrentContext()!

    /// ClearedMark
    do {
      context.saveGState()
      context.translateBy(x: -424, y: -270)

      /// ! Clear Entry !
      let clearEntry = NSMutableAttributedString(string: "! Clear Entry ! ")
      clearEntry.addAttribute(.font, value: UIFont(name: "TrebuchetMS-Bold", size: 8.5)!, range: NSRange(location: 0, length: clearEntry.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .right
        paragraphStyle.paragraphSpacing = 1.66
        clearEntry.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: clearEntry.length))
      }
      context.saveGState()
      clearEntry.draw(in: CGRect(x: 0.5, y: 0.48, width: 57.5, height: 11))
      context.restoreGState()

      /// <Dose>
      let dose = NSMutableAttributedString(string: dose)
      dose.addAttribute(.font, value: UIFont(name: "TrebuchetMS-Italic", size: 7.5)!, range: NSRange(location: 0, length: dose.length))
      dose.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: dose.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.paragraphSpacing = 1.66
        dose.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: dose.length))
      }
      context.saveGState()
      dose.draw(in: CGRect(x: 62, y: 1.48, width: 113, height: 11))
      context.restoreGState()

      /// <Recorded Time>
      let recordedTime = NSMutableAttributedString(string: recordedTime)
      recordedTime.addAttribute(.font, value: UIFont(name: "Courier-Oblique", size: 7.5)!, range: NSRange(location: 0, length: recordedTime.length))
      recordedTime.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: recordedTime.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.paragraphSpacing = 1.66
        recordedTime.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recordedTime.length))
      }
      context.saveGState()
      recordedTime.draw(in: CGRect(x: 62, y: 11.41, width: 112.5, height: 11))
      context.restoreGState()

      /// <Planned Time>
      let plannedTime = NSMutableAttributedString(string: plannedTime)
      plannedTime.addAttribute(.font, value: UIFont(name: "Courier-Oblique", size: 7.5)!, range: NSRange(location: 0, length: plannedTime.length))
      plannedTime.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: plannedTime.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.paragraphSpacing = 1.66
        plannedTime.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: plannedTime.length))
      }
      context.saveGState()
      plannedTime.draw(in: CGRect(x: 62, y: 19.95, width: 112.5, height: 11))
      context.restoreGState()

      /// Associated
      let associated = NSMutableAttributedString(string: "    Associated")
      associated.addAttribute(.font, value: UIFont(name: "TrebuchetMS", size: 7.5)!, range: NSRange(location: 0, length: associated.length))
      associated.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: associated.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .right
        paragraphStyle.paragraphSpacing = 1.66
        associated.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: associated.length))
      }
      context.saveGState()
      associated.draw(in: CGRect(x: 1, y: 19.95, width: 57, height: 10))
      context.restoreGState()

      /// Cleared
      let cleared = NSMutableAttributedString(string: "Cleared\n ")
      cleared.addAttribute(.font, value: UIFont(name: "TrebuchetMS", size: 7.5)!, range: NSRange(location: 0, length: cleared.length))
      cleared.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: cleared.length))
      do {
        let paragraphStyle = NSMutableParagraphStyle()
        paragraphStyle.alignment = .right
        paragraphStyle.paragraphSpacing = 1.66
        cleared.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cleared.length))
      }
      context.saveGState()
      cleared.draw(in: CGRect(x: 16, y: 11.41, width: 42, height: 10))
      context.restoreGState()

      /// Line 2
      let line2 = UIBezierPath()
      line2.move(to: CGPoint(x: 0.5, y: 0))
      line2.addLine(to: CGPoint(x: 0.5, y: 28.55))
      context.saveGState()
      context.translateBy(x: 0.25, y: 0.97)
      line2.lineCapStyle = .square
      line2.lineWidth = 0.5
      UIColor.black.setStroke()
      line2.stroke()
      context.restoreGState()

      /// Line 3
      let line3 = UIBezierPath()
      line3.move(to: CGPoint(x: 0, y: 0.5))
      line3.addLine(to: CGPoint(x: 300, y: 0.5))
      context.saveGState()
      context.translateBy(x: 0.75, y: 0.23)
      line3.lineCapStyle = .square
      line3.lineWidth = 0.5
      UIColor.black.setStroke()
      line3.stroke()
      context.restoreGState()

      /// Line 3
      let line4 = UIBezierPath()
      line4.move(to: CGPoint(x: 0, y: 0.5))
      line4.addLine(to: CGPoint(x: 300, y: 0.5))
      context.saveGState()
      context.translateBy(x: 1.5, y: 10.5)
      line4.lineCapStyle = .square
      line4.lineWidth = 0.5
      UIColor.black.setStroke()
      line4.stroke()
      context.restoreGState()

      context.restoreGState()
    }
  }
  
  
}
